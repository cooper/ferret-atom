'scopeName': 'source.ferret'
'name': 'ferret'
'fileTypes': [
  'frt'
]
'firstLineMatch': '^#!.*\\bferret\\b'
'patterns': [
  {
    'include': '#line_comment'
  }
  {
    'include': '#variable'
  }
  {
    'comment': 'Object/hash keys and return pair keys'
    'captures':
      '1':
        'name': 'constant.other.key.ferret'
    'match': '\\b(\\w+)\\s*(?=(?:\\:|->))'
  }
  {
    'match': '(?<={)\\s*\\w+\\s*(?=})'
    'name': 'constant.other.bareword.ferret'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.ferret'
      '2':
        'name': 'entity.name.type.class.ferret'
    'match': '^\\s*(class)\\s+([^\\s;]+)'
    'name': 'meta.class.ferret'
  }
  {
    'captures':
      '1':
        'name': 'keyword.control.ferret'
      '2':
        'name': 'entity.name.type.class.ferret'
    'match': '^\\s*(package)\\s+([^\\s;]+)'
    'name': 'meta.module.ferret'
  }
  {
    'captures':
      '1':
        'name': 'storage.type.func.ferret'
      '2':
        'name': 'entity.name.function.ferret'
    'match': '\\b(func|method)(?:\\s+([-a-zA-Z0-9_]+))?\\s*[^\\w\\{]'
    'name': 'meta.function.ferret'
  }
  {
    'captures':
      '1':
        'name': 'storage.type.func.ferret'
    'match': '^\\s*(init|on|inside)\\b'
    'name': 'meta.function.ferret'
  }
  {
    'begin': '^(?=(\\t| {4}))'
    'end': '(?=[^\\t\\s])'
    'name': 'meta.leading-tabs'
    'patterns': [
      {
        'captures':
          '1':
            'name': 'meta.odd-tab'
          '2':
            'name': 'meta.even-tab'
        'match': '(\\t| {4})(\\t| {4})?'
      }
    ]
  }
  {
    'match': '(?<!\\.)\\b(true|false)(?!\\s*:)\\b|(?<=\\?)(?:\\s*)(true|false)(?=\\s*:)'
    'captures':
      '1':
        'name': 'constant.language.boolean.$1.ferret'
      '2':
        'name': 'constant.language.boolean.$2.ferret'
  }
  {
    'match': '\\b(undefined)\\b'
    'name': 'constant.language.ferret'
  }
  {
    'match': '\\b(__FILE__|__LINE__|__PACKAGE__)\\b'
    'name': 'constant.language.ferret'
  }
  {
    'begin': '\\b(__DATA__|__END__)\\n?'
    'captures':
      '1':
        'name': 'constant.language.ferret'
    'contentName': 'text.embedded.ferret'
  }
  {
    'match': '(?<!->)\\b(continue|do|else|for|if|last|next|redo|return|until|while|switch|case)\\b'
    'name': 'keyword.control.ferret'
  }
  {
    'match': '\\b(want|need|share|local)\\b'
    'name': 'storage.modifier.ferret'
  }
  {
    'match': '(<=>|->)'
    'name': 'keyword.operator.comparison.ferret'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.ferret'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.ferret'
    'name': 'string.quoted.double.ferret'
    'patterns': [
      {
        'include': '#escaped_char'
      }
      {
        'include': '#variable'
      }
    ]
  }
  {
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.ferret'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.ferret'
    'name': 'string.quoted.single.ferret'
    'patterns': [
      {
        'match': '\\\\[\'\\\\]'
        'name': 'constant.character.escape.ferret'
      }
    ]
  }
  {
    'match': '\\b(x)\\s*(\\d+)\\b'
    'captures':
      '1':
        'name': 'support.function.ferret'
      '2':
        'name': 'entity.name.function.ferret'
  }
  {
    'match': '\\b(dump|inspect|copy|say|print)\\b'
    'name': 'support.function.ferret'
  }
  {
    'comment': 'Mark as namespace separator if double colons followed by capital letter'
    'match': '(::)\\s*(?=[A-Z])'
    'captures':
      '1':
        'name': 'punctuation.separator.namespace.ferret'
  }
  {
    'comment': 'Mark as method separator if double colons not followed by capital letter'
    'match': '(\\.|::)\\s*(?![A-Z])'
    'captures':
      '1':
        'name': 'punctuation.separator.method.ferret'
  }
]
'repository':
  'escaped_char':
    'patterns': [
      {
        'match': '\\\\\\d+'
        'name': 'constant.character.escape.ferret'
      }
      {
        'match': '\\\\c[^\\s\\\\]'
        'name': 'constant.character.escape.ferret'
      }
      {
        'match': '\\\\g(?:\\{(?:\\w*|-\\d+)\\}|\\d+)'
        'name': 'constant.character.escape.ferret'
      }
      {
        'match': '\\\\k(?:\\{\\w*\\}|<\\w*>|\'\\w*\')'
        'name': 'constant.character.escape.ferret'
      }
      {
        'match': '\\\\N\\{[^\\}]*\\}'
        'name': 'constant.character.escape.ferret'
      }
      {
        'match': '\\\\o\\{\\d*\\}'
        'name': 'constant.character.escape.ferret'
      }
      {
        'match': '\\\\(?:p|P)(?:\\{\\w*\\}|P)'
        'name': 'constant.character.escape.ferret'
      }
      {
        'match': '\\\\x(?:[0-9a-zA-Z]{2}|\\{\\w*\\})?'
        'name': 'constant.character.escape.ferret'
      }
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.ferret'
      }
    ]
  'line_comment':
    'patterns': [
      {
        'begin': '(^[ \\t]+)?(?=#)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.ferret'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '#'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.ferret'
            'end': '\\n'
            'name': 'comment.line.number-sign.ferret'
          }
        ]
      }
    ]
  'nested_braces':
    'begin': '\\{'
    'captures':
      '1':
        'name': 'punctuation.section.scope.ferret'
    'end': '\\}'
    'patterns': [
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nested_braces'
      }
    ]
  'nested_braces_interpolated':
    'begin': '\\{'
    'captures':
      '1':
        'name': 'punctuation.section.scope.ferret'
    'end': '\\}'
    'patterns': [
      {
        'include': '#escaped_char'
      }
      {
        'include': '#variable'
      }
      {
        'include': '#nested_braces_interpolated'
      }
    ]
  'nested_brackets':
    'begin': '\\['
    'captures':
      '1':
        'name': 'punctuation.section.scope.ferret'
    'end': '\\]'
    'patterns': [
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nested_brackets'
      }
    ]
  'nested_brackets_interpolated':
    'begin': '\\['
    'captures':
      '1':
        'name': 'punctuation.section.scope.ferret'
    'end': '\\]'
    'patterns': [
      {
        'include': '#escaped_char'
      }
      {
        'include': '#variable'
      }
      {
        'include': '#nested_brackets_interpolated'
      }
    ]
  'nested_ltgt':
    'begin': '<'
    'captures':
      '1':
        'name': 'punctuation.section.scope.ferret'
    'end': '>'
    'patterns': [
      {
        'include': '#nested_ltgt'
      }
    ]
  'nested_ltgt_interpolated':
    'begin': '<'
    'captures':
      '1':
        'name': 'punctuation.section.scope.ferret'
    'end': '>'
    'patterns': [
      {
        'include': '#variable'
      }
      {
        'include': '#nested_ltgt_interpolated'
      }
    ]
  'nested_parens':
    'begin': '\\('
    'captures':
      '1':
        'name': 'punctuation.section.scope.ferret'
    'end': '\\)'
    'patterns': [
      {
        'include': '#escaped_char'
      }
      {
        'include': '#nested_parens'
      }
    ]
  'nested_parens_interpolated':
    'begin': '\\('
    'captures':
      '1':
        'name': 'punctuation.section.scope.ferret'
    'end': '\\)'
    'patterns': [
      {
        'include': '#escaped_char'
      }
      {
        'include': '#variable'
      }
      {
        'include': '#nested_parens_interpolated'
      }
    ]
  'properties':
    'patterns': [
      {
        'comment': '`prop` in `obj.prop`, `func().prop`'
        'match': '(\\.)\\s*(?:(\\b\\d\\w*)|([A-Z][A-Z0-9_$]*\\b\\$*)|([\\w$]*))'
        'captures':
          '1':
            'name': 'meta.delimiter.property.period.ferret'
          '3':
            'name': 'constant.other.property.ferret'
          '4':
            'name': 'variable.other.property.ferret'
      }
    ]
  'storage_types':
    'patterns': [
      {
        'match': '\\bBool\\b'
        'name': 'storage.type.boolean.ferret'
      }
      {
        'match': '\\b(Object|Obj|Hash|List|Set)\\b'
        'name': 'storage.type.collection.ferret'
      }
      {
        'match': '\\b(Error|Err)\\b'
        'name': 'storage.type.error.ferret'
      }
      {
        'match': '\\b(String|Str)\\b'
        'name': 'storage.type.string.ferret'
      }
      {
        'match': '\\b(Number|Num)\\b'
        'name': 'storage.type.numeric.ferret'
      }

    ]
  'variable':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.ferret'
        'match': '(@)([a-zA-Zx7f-xff\\$])([a-zA-Z0-9_x7f-xff\\$])*\\b'
        'name': 'variable.other.readwrite.instance.ferret'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.ferret'
        'match': '(\\$)([a-zA-Zx7f-xff\\$])([a-zA-Z0-9_x7f-xff\\$])*\\b'
        'name': 'variable.other.readwrite.global.ferret'
      }
      {
        'captures':
          '1':
            'name': 'punctuation.definition.variable.ferret'
        'match': '(\\*)([a-zA-Zx7f-xff\\$])([a-zA-Z0-9_x7f-xff\\$])*\\b'
        'name': 'variable.other.readwrite.special.ferret'
      }
    ]
